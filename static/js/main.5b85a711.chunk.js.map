{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Component","SORTS","NONE","list","TITLE","sortBy","AUTHOR","COMMENTS","reverse","POINTS","App","props","state","results","searchKey","searchTerm","isLoading","needsToSearchTopstories","bind","setSearchTopstories","fetchSearchTopstories","onSearchChange","onSearchSubmit","onDismiss","this","result","hits","page","setState","prevState","oldHits","updatedHits","updateSearchTopstoriesState","fetch","then","response","json","event","preventDefault","target","value","id","filter","item","objectID","className","onChange","onSubmit","ButtonWithLoading","onClick","Search","children","type","Table","sortKey","isSortReverse","onSort","sortedList","reverseSortedList","style","width","activeSortKey","map","key","href","url","title","author","num_comments","points","Sort","sortClass","classNames","Button","Loading","rest","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5b85a711.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { sortBy } from 'lodash';\nimport classNames from 'classnames';\nimport './App.css';\n\nconst DEFAULT_QUERY = 'redux';\nconst DEFAULT_PAGE = 0;\nconst DEFAULT_HPP = '100';\n\nconst PATH_BASE = 'https://hn.algolia.com/api/v1';\nconst PATH_SEARCH = '/search';\nconst PARAM_SEARCH = 'query=';\nconst PARAM_PAGE = 'page=';\nconst PARAM_HPP = 'hitsPerPage=';\n\nconst SORTS = {\n  NONE: list => list,\n  TITLE: list => sortBy(list, 'title'),\n  AUTHOR: list => sortBy(list, 'author'),\n  COMMENTS: list => sortBy(list, 'num_comments').reverse(),\n  POINTS: list => sortBy(list, 'points').reverse(),\n};\n\nconst updateSearchTopstoriesState = (hits, page) => (prevState) => {\n  const { searchKey, results } = prevState;\n\n  const oldHits = results && results[searchKey]\n    ? results[searchKey].hits\n    : [];\n\n  const updatedHits = [\n    ...oldHits,\n    ...hits\n  ];\n\n  return {\n    results: {\n      ...results,\n      [searchKey]: { hits: updatedHits, page }\n    },\n    isLoading: false\n  };\n};\n\nclass App extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      results: null,\n      searchKey: '',\n      searchTerm: DEFAULT_QUERY,\n      isLoading: false,\n    };\n\n    this.needsToSearchTopstories = this.needsToSearchTopstories.bind(this);\n    this.setSearchTopstories = this.setSearchTopstories.bind(this);\n    this.fetchSearchTopstories = this.fetchSearchTopstories.bind(this);\n    this.onSearchChange = this.onSearchChange.bind(this);\n    this.onSearchSubmit = this.onSearchSubmit.bind(this);\n    this.onDismiss = this.onDismiss.bind(this);\n  }\n\n  needsToSearchTopstories(searchTerm) {\n    return !this.state.results[searchTerm];\n  }\n\n  setSearchTopstories(result) {\n    const { hits, page } = result;\n    this.setState(updateSearchTopstoriesState(hits, page));\n  }\n\n  fetchSearchTopstories(searchTerm, page) {\n    this.setState({ isLoading: true });\n\n    fetch(`${PATH_BASE}${PATH_SEARCH}?${PARAM_SEARCH}${searchTerm}&${PARAM_PAGE}${page}&${PARAM_HPP}${DEFAULT_HPP}`)\n      .then(response => response.json())\n      .then(result => this.setSearchTopstories(result));\n  }\n\n  componentDidMount() {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n    this.fetchSearchTopstories(searchTerm, DEFAULT_PAGE);\n  }\n\n  onSearchSubmit(event) {\n    const { searchTerm } = this.state;\n    this.setState({ searchKey: searchTerm });\n\n    if (this.needsToSearchTopstories(searchTerm)) {\n      this.fetchSearchTopstories(searchTerm, DEFAULT_PAGE);\n    }\n\n    event.preventDefault();\n  }\n\n  onSearchChange(event) {\n    this.setState({ searchTerm: event.target.value });\n  }\n\n  onDismiss(id) {\n    const { searchKey, results } = this.state;\n    const { hits, page } = results[searchKey];\n\n    const isNotId = item => item.objectID !== id;\n    const updatedHits = hits.filter(isNotId);\n\n    this.setState({\n      results: {\n        ...results,\n        [searchKey]: { hits: updatedHits, page }\n      }\n    });\n  }\n\n  render() {\n    const {\n      searchTerm,\n      results,\n      searchKey,\n      isLoading\n    } = this.state;\n\n    const page = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].page\n    ) || 0;\n\n    const list = (\n      results &&\n      results[searchKey] &&\n      results[searchKey].hits\n    ) || [];\n\n    return (\n      <div className=\"page\">\n          <div className=\"interactions\">\n            <Search\n              value={searchTerm}\n              onChange={this.onSearchChange}\n              onSubmit={this.onSearchSubmit}\n            >\n              Search\n            </Search>\n          </div>\n          <Table\n            list={list}\n            onDismiss={this.onDismiss}\n          />\n          <div className=\"interactions\">\n            <ButtonWithLoading\n              isLoading={isLoading}\n              onClick={() => this.fetchSearchTopstories(searchKey, page + 1)}>\n              More\n            </ButtonWithLoading>\n          </div>\n      </div>\n    );\n  }\n}\n\nconst Search = ({\n  value,\n  onChange,\n  onSubmit,\n  children\n}) =>\n  <form onSubmit={onSubmit}>\n    <input\n      type=\"text\"\n      value={value}\n      onChange={onChange}\n    />\n    <button type=\"submit\">\n      {children}\n    </button>\n  </form>\n\nclass Table extends Component {\n\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sortKey: 'NONE',\n      isSortReverse: false,\n    };\n\n    this.onSort = this.onSort.bind(this);\n  }\n\n  onSort(sortKey) {\n    const isSortReverse = this.state.sortKey === sortKey && !this.state.isSortReverse;\n    this.setState({ sortKey, isSortReverse });\n  }\n\n  render() {\n    const {\n      list,\n      onDismiss\n    } = this.props;\n\n    const {\n      sortKey,\n      isSortReverse,\n    } = this.state;\n\n    const sortedList = SORTS[sortKey](list);\n    const reverseSortedList = isSortReverse\n      ? sortedList.reverse()\n      : sortedList;\n\n    return(\n      <div className=\"table\">\n        <div className=\"table-header\">\n          <span style={{ width: '40%' }}>\n            <Sort\n              sortKey={'TITLE'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Title\n            </Sort>\n          </span>\n          <span style={{ width: '30%' }}>\n            <Sort\n              sortKey={'AUTHOR'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Author\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'COMMENTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Comments\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            <Sort\n              sortKey={'POINTS'}\n              onSort={this.onSort}\n              activeSortKey={sortKey}\n            >\n              Points\n            </Sort>\n          </span>\n          <span style={{ width: '10%' }}>\n            Archive\n          </span>\n        </div>\n        { reverseSortedList.map(item =>\n          <div key={item.objectID} className=\"table-row\">\n            <span style={{ width: '40%' }}>\n              <a href={item.url}>{item.title}</a>\n            </span>\n            <span style={{ width: '30%' }}>\n              {item.author}\n            </span>\n            <span style={{ width: '10%' }}>\n              {item.num_comments}\n            </span>\n            <span style={{ width: '10%' }}>\n              {item.points}\n            </span>\n            <span style={{ width: '10%' }}>\n              <Button\n                onClick={() => onDismiss(item.objectID)}\n                className=\"button-inline\"\n              >\n                Dismiss\n              </Button>\n            </span>\n          </div>\n        )}\n      </div>\n    );\n  }\n}\n\nconst Sort = ({\n  sortKey,\n  activeSortKey,\n  onSort,\n  children\n}) => {\n  const sortClass = classNames(\n    'button-inline',\n    { 'button-active': sortKey === activeSortKey }\n  );\n\n  return (\n    <Button\n      onClick={() => onSort(sortKey)}\n      className={sortClass}\n    >\n      {children}\n    </Button>\n  );\n}\n\nconst Button = ({ onClick, className = '', children }) =>\n  <button\n    onClick={onClick}\n    className={className}\n    type=\"button\"\n  >\n    {children}\n  </button>\n\nconst Loading = () =>\n  <div>Loading ...</div>\n\nconst withLoading = (Component) => ({ isLoading, ...rest }) =>\n  isLoading ? <Loading /> : <Component { ...rest } />\n\nconst ButtonWithLoading = withLoading(Button);\n\nexport default App;\n\nexport {\n  Button,\n  Search,\n  Table,\n};","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nif (module.hot) {\n  module.hot.accept();\n}\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}